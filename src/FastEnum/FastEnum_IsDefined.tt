<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var parameters = new[]
    {
        new { TypeName = "SByte",  CompatibleName = "sbyte" },
        new { TypeName = "Byte",   CompatibleName = "byte" },
        new { TypeName = "Int16",  CompatibleName = "short" },
        new { TypeName = "UInt16", CompatibleName = "ushort" },
        new { TypeName = "Int32",  CompatibleName = "int" },
        new { TypeName = "UInt32", CompatibleName = "uint" },
        new { TypeName = "Int64",  CompatibleName = "long" },
        new { TypeName = "UInt64", CompatibleName = "ulong" },
    };
#>
// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
using System;
using FastEnumUtility.Internals;



namespace FastEnumUtility
{
    /// <summary>
    /// Provides high performance utilitis for enum type.
    /// </summary>
    public static partial class FastEnum
    {
<# foreach (var x in parameters) { #>
        /// <summary>
        /// Returns an indication whether a constant with a specified value exists in a specified enumeration.
        /// </summary>
        /// <param name="value"></param>
        /// <typeparam name="T">Enum type</typeparam>
        /// <returns></returns>
        public static bool IsDefined<T>(<#= x.CompatibleName #> value)
            where T : struct, Enum
        {
            if (Cache_Type<T>.UnderlyingType == typeof(<#= x.CompatibleName #>))
                return <#= x.TypeName #>Operation<T>.IsDefined(ref value);
            throw new ArgumentException(IsDefinedTypeMismatchMessage);
        }


<# } #>
    }
}
