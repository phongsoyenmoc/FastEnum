<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var parameters = new[]
    {
        new { TypeName = "SByte",  CompatibleName = "sbyte",  BitCount = 8,  IsSigned = true },
        new { TypeName = "Byte",   CompatibleName = "byte",   BitCount = 8,  IsSigned = false },
        new { TypeName = "Int16",  CompatibleName = "short",  BitCount = 16, IsSigned = true },
        new { TypeName = "UInt16", CompatibleName = "ushort", BitCount = 16, IsSigned = false },
        new { TypeName = "Int32",  CompatibleName = "int",    BitCount = 32, IsSigned = true },
        new { TypeName = "UInt32", CompatibleName = "uint",   BitCount = 32, IsSigned = false },
        new { TypeName = "Int64",  CompatibleName = "long",   BitCount = 64, IsSigned = true },
        new { TypeName = "UInt64", CompatibleName = "ulong",  BitCount = 64, IsSigned = false },
    };
#>
// <auto-generated>
// This .cs file is generated by T4 template. Don't change it. Change the .tt file instead.
// </auto-generated>
using System;
using System.Runtime.CompilerServices;



namespace FastEnumUtility
{
    /// <summary>
    /// Provides <see cref="Enum"/> extension methods.
    /// </summary>
    /// <typeparam name="T">Enum type</typeparam>
    public static partial class FastEnumExtensions
    {
<# foreach (var x in parameters) { #>
        /// <summary>
        /// Converts to the <#= x.BitCount #>-bit <#= x.IsSigned ? "" : "un" #>signed integer.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public static <#= x.CompatibleName #> To<#= x.TypeName #><T>(this T value)
            where T : struct, Enum
            => FastEnum.GetUnderlyingType<T>() == typeof(<#= x.CompatibleName #>)
            ? Unsafe.As<T, <#= x.CompatibleName #>>(ref value)
            : throw new ArgumentException(nameof(value));


<# } #>
    }
}
